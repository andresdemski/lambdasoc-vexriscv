from nmigen.build import Resource, Pins, Clock, Attrs

def get_sim_platform(base_class):
    class VerilatorPlatform(base_class):
        _verilator_files_templates = {
            "build_{{name}}.sh": r"""
                # {{autogenerated}}
                set -e{{verbose("x")}}
                verilator --cc -Wno-lint -Mdir verilated --exe --trace \
                    --top-module {{name}} \
                    sim.cpp \
                    {% for file in platform.iter_files(".v") -%}
                        {{file}} \
                    {% endfor %}
                    {{name}}.v
                make -C verilated -f V{{name}}.mk
                ./verilated/V{{name}}
            """,

            "{{name}}.v": r"""
                {{emit_verilog()}}
            """,

            "sim.cpp": r"""
                #include "V{{name}}.h"

                #include "verilated_vcd_c.h"
                #include <iostream>
                using namespace std;

                int main (int argc, char **argv, char **env)
                {
                    Verilated::commandArgs(argc, argv);
                    V{{name}}* top = new V{{name}};
                    Verilated::traceEverOn(true);
                    VerilatedVcdC* vcd = new VerilatedVcdC;
                    volatile unsigned int time = 0;


                    top->trace (vcd, 99);
                    vcd->open ("{{name}}.vcd");

                    top->clk100_0___05Fp = 0;
                    top->rst_0___05Fio = 0;


                    while (time < 1000000 && !Verilated::gotFinish()) {
                        if (time > 20) top->rst_0___05Fio = 1;
                        top->uart_0___05Frx___05Fio = top->uart_0___05Ftx___05Fio;
                        top->clk100_0___05Fp = time & 1;
                        top->eval();
                        vcd->dump(time);
                        time ++;
                    }

                    top->final();
                    vcd->close();

                    delete top;
                }
            """,

        }

        @property
        def file_templates(self):
            return self._verilator_files_templates

        def __init__(self):
            super().__init__()
            self.toolchain = 'verilator'

        def toolchain_prepare(self, fragment, name, **kwargs):
            return super().toolchain_prepare(fragment, name, **kwargs)

        def run(self, elaboratable, name="top", sim_dir='sim', **kwargs):
            plan = self.prepare(elaboratable, name, **kwargs)
            products = plan.execute_local(sim_dir)

    return VerilatorPlatform
